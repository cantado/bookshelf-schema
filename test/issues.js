// Generated by CoffeeScript 2.3.2
var Bookshelf, Fields, HasMany, Relations, Schema, init;

Bookshelf = require('bookshelf');

Schema = require('../src/');

init = require('./init');

Fields = require('../src/fields');

Relations = require('../src/relations');

({HasMany} = Relations);

describe("Issues", function() {
  var db;
  this.timeout(3000);
  db = null;
  before(co(function() {
    db = init.init();
    return db.plugin('registry');
  }));
  describe("#3", function() {
    var JournalItemsModel, JournalModel, createTables;
    JournalItemsModel = JournalModel = null;
    createTables = co(function*() {
      var knex;
      knex = db.knex;
      yield knex.schema.dropTableIfExists('journal');
      yield knex.schema.createTable('journal', function(table) {
        return table.increments('id').primary();
      });
      yield knex.schema.dropTableIfExists('journal_items');
      return (yield knex.schema.createTable('journal_items', function(table) {
        table.increments('id').primary();
        return table.integer('journal_id');
      }));
    });
    before(co(function*() {
      yield createTables();
      JournalItemsModel = db.Model.extend({
        tableName: 'journal_items'
      }, {});
      db.model('JournalItem', JournalItemsModel);
      JournalModel = db.Model.extend({
        tableName: 'journal'
      }, {});
      return db.model('Journal', JournalModel);
    }));
    it('should deduce relation name more properly', function() {
      return expect(function() {
        return JournalModel.schema([HasMany(JournalItemsModel)]);
      }).not.to.throw();
    });
    return it('should allow to use camelcase name for relations', function*() {
      var journal;
      JournalModel.schema([
        HasMany(JournalItemsModel,
        {
          name: 'JournalItems'
        })
      ]);
      journal = (yield JournalModel.forge().save());
      return JournalModel.forge({
        id: journal.id
      }).fetch({
        withRelated: ['JournalItems']
      }).should.be.fullfiled;
    });
  });
  return describe('#4', function() {
    return describe('should work with plugins that extends Model', co(function() {
      it('added after Schema', function*() {
        var User;
        db.plugin('virtuals');
        db.plugin('visibility');
        yield init.users();
        User = (function() {
          class User extends db.Model {};

          User.prototype.tableName = 'users';

          User.prototype.schema = [Fields.StringField('username')];

          return User;

        }).call(this);
        return User.forge({
          id: 1
        }).fetch().should.be.fullfiled;
      });
      it('added before Schema', co(function*() {
        var User;
        db = init.initDb();
        db.plugin('virtuals');
        db.plugin('visibility');
        db.plugin(Schema());
        yield init.users();
        User = (function() {
          class User extends db.Model {};

          User.prototype.tableName = 'users';

          User.prototype.schema = [Fields.StringField('username')];

          return User;

        }).call(this);
        return User.forge({
          id: 1
        }).fetch().should.be.fullfiled;
      }));
      return it('added around Schema', co(function*() {
        var User;
        db = init.initDb();
        db.plugin('virtuals');
        db.plugin(Schema());
        db.plugin('visibility');
        yield init.users();
        User = (function() {
          class User extends db.Model {};

          User.prototype.tableName = 'users';

          User.prototype.schema = [Fields.StringField('username')];

          return User;

        }).call(this);
        return User.forge({
          id: 1
        }).fetch().should.be.fullfiled;
      }));
    }));
  });
});
