// Generated by CoffeeScript 2.3.2
var BelongsTo, Bookshelf, EmailField, Fields, HasMany, IntField, Relations, Schema, StringField, init;

Bookshelf = require('bookshelf');

Schema = require('../lib/');

init = require('./init');

Fields = require('../lib/fields');

Relations = require('../lib/relations');

({StringField, IntField, EmailField} = Fields);

({HasMany, BelongsTo} = Relations);

describe("Relations", function() {
  var Photo, User, db, fixtures;
  this.timeout(3000);
  db = null;
  User = null;
  Photo = null;
  fixtures = {
    alice: co(function*() {
      var alice, photos;
      alice = (yield new User({
        username: 'alice'
      }).save());
      photos = (yield [
        new Photo({
          filename: 'photo1.jpg',
          user_id: alice.id
        }).save(),
        new Photo({
          filename: 'photo2.jpg',
          user_id: alice.id
        }).save()
      ]);
      return [alice, photos];
    })
  };
  before(co(function*() {
    db = init.init();
    return (yield [init.users(), init.photos()]);
  }));
  describe('Common', function() {
    beforeEach(function() {
      Photo = (function() {
        class Photo extends db.Model {};

        Photo.prototype.tableName = 'photos';

        return Photo;

      }).call(this);
      User = (function() {
        class User extends db.Model {};

        User.prototype.tableName = 'users';

        User.schema([StringField('username'), HasMany(Photo)]);

        return User;

      }).call(this);
      return Photo.schema([StringField('filename'), BelongsTo(User)]);
    });
    afterEach(function() {
      return init.truncate('users', 'photos');
    });
    it('does something relevant', co(function*() {
      var _, alice;
      [alice, _] = (yield fixtures.alice());
      yield alice.load('photos');
      return alice.$photos.at(0).should.be.an.instanceof(Photo);
    }));
    it('uses passed query processor', co(function*() {
      var _, alice, photos;
      User = (function() {
        class User extends db.Model {};

        User.prototype.tableName = 'users';

        User.schema([
          HasMany(Photo,
          {
            query: function() {
              return this.query('where',
          'filename',
          '=',
          'photo1.jpg');
            }
          })
        ]);

        return User;

      }).call(this);
      [alice, _] = (yield fixtures.alice());
      yield alice.$photos.count().should.become(1);
      photos = (yield alice.$photos.fetch());
      photos.length.should.be.equal(1);
      photos.first().should.be.an.instanceof(Photo);
      return photos.first().filename.should.be.equal('photo1.jpg');
    }));
    return it('works with plugin registry', co(function*() {
      var _, alice, db2;
      db2 = Bookshelf(db.knex);
      db2.plugin('registry');
      db2.plugin(Schema());
      User = (function() {
        class User extends db2.Model {};

        User.prototype.tableName = 'users';

        User.schema([HasMany('Photo')]);

        return User;

      }).call(this);
      db2.model('User', User);
      Photo = (function() {
        class Photo extends db2.Model {};

        Photo.prototype.tableName = 'photos';

        Photo.schema([StringField('filename')]);

        return Photo;

      }).call(this);
      db2.model('Photo', Photo);
      [alice, _] = (yield fixtures.alice());
      return alice.$photos.count().should.become(2);
    }));
  });
  return describe('Configurable accessor prefix', function() {
    it('can use different accessor prefix for relations', co(function*() {
      var _, alice, photo;
      Photo = (function() {
        class Photo extends db.Model {};

        Photo.prototype.tableName = 'photos';

        return Photo;

      }).call(this);
      User = (function() {
        class User extends db.Model {};

        User.prototype.tableName = 'users';

        User.schema([
          StringField('username'),
          HasMany(Photo,
          {
            accessorPrefix: 'rel_'
          })
        ]);

        return User;

      }).call(this);
      Photo.schema([StringField('filename'), BelongsTo(User)]);
      [alice, _] = (yield fixtures.alice());
      yield alice.load('photos');
      photo = alice.rel_photos.at(0);
      photo.should.be.an.instanceof(Photo);
      expect(alice.$photos).not.to.be.defined;
      yield photo.load('user');
      return photo.$user.should.be.an.instanceof(User);
    }));
    return it('allows pluginwide configure of relations accessor prefix', co(function*() {
      var _, alice, db2;
      db2 = Bookshelf(db.knex);
      db2.plugin('registry');
      db2.plugin(Schema({
        relationsAccessorPrefix: 'rel_'
      }));
      Photo = (function() {
        class Photo extends db.Model {};

        Photo.prototype.tableName = 'photos';

        return Photo;

      }).call(this);
      User = (function() {
        class User extends db.Model {};

        User.prototype.tableName = 'users';

        User.schema([
          StringField('username'),
          HasMany(Photo,
          {
            accessorPrefix: 'rel_'
          })
        ]);

        return User;

      }).call(this);
      [alice, _] = (yield fixtures.alice());
      yield alice.load('photos');
      return alice.rel_photos.at(0).should.be.an.instanceof(Photo);
    }));
  });
});
