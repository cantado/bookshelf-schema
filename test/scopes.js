// Generated by CoffeeScript 2.3.2
var BelongsToMany, Bookshelf, BooleanField, Schema, Scope, StringField, init;

Bookshelf = require('bookshelf');

Schema = require('../lib/');

init = require('./init');

({StringField, BooleanField} = require('../lib/fields'));

({BelongsToMany} = require('../lib/relations'));

Scope = require('../lib/scopes');

describe("Scopes", function() {
  var Group, User, db;
  this.timeout(3000);
  db = null;
  User = null;
  Group = null;
  before(co(function*() {
    db = init.init();
    return (yield [init.users(), init.groups()]);
  }));
  beforeEach(function() {
    User = (function() {
      class User extends db.Model {};

      User.prototype.tableName = 'users';

      return User;

    }).call(this);
    return Group = (function() {
      class Group extends db.Model {};

      Group.prototype.tableName = 'groups';

      return Group;

    }).call(this);
  });
  afterEach(function() {
    return init.truncate('users');
  });
  it('creates scopes as a functions', function() {
    User.schema([Scope('flagged', function() {})]);
    expect(User.flagged).to.be.a.function;
    return expect(User.prototype.flagged).to.be.a.function;
  });
  describe('applies scope', function() {
    beforeEach(co(function*() {
      User.schema([
        StringField('username'),
        BooleanField('flag'),
        Scope('flagged',
        function() {
          return this.where({
            flag: true
          });
        })
      ]);
      return (yield [
        new User({
          username: 'alice',
          flag: true
        }).save(),
        new User({
          username: 'bob',
          flag: false
        }).save()
      ]);
    }));
    it('with fetchAll', co(function*() {
      var flagged;
      flagged = (yield User.flagged().fetchAll());
      flagged.should.be.an.instanceof(db.Collection);
      flagged.length.should.equal(1);
      return flagged.at(0).flag.should.be.true;
    }));
    it('with fetch', co(function*() {
      var flagged;
      flagged = (yield User.flagged().fetch());
      flagged.should.be.an.instanceof(User);
      return flagged.flag.should.be.true;
    }));
    return it('with count', function() {
      return User.flagged().count().then(parseInt).should.become(1);
    });
  });
  describe('applies chained scopes', function() {
    beforeEach(co(function*() {
      User.schema([
        StringField('username'),
        BooleanField('flag'),
        Scope('flagged',
        function() {
          return this.where({
            flag: true
          });
        }),
        Scope('nameStartsWith',
        function(value) {
          return this.where('username',
        'like',
        `${value}%`);
        })
      ]);
      return (yield [
        new User({
          username: 'alice',
          flag: true
        }).save(),
        new User({
          username: 'bob',
          flag: true
        }).save(),
        new User({
          username: 'alan',
          flag: false
        }).save()
      ]);
    }));
    it('with fetchAll', co(function*() {
      var result;
      result = (yield User.flagged().nameStartsWith('a').fetchAll());
      result.should.be.an.instanceof(db.Collection);
      result.length.should.equal(1);
      return result.at(0).username.should.equal('alice');
    }));
    it('with fetch', co(function*() {
      var result;
      result = (yield User.flagged().nameStartsWith('a').fetch());
      result.should.be.an.instanceof(User);
      return result.username.should.equal('alice');
    }));
    return it('with count', function() {
      return User.flagged().nameStartsWith('a').count().then(parseInt).should.become(1);
    });
  });
  it('applies default scope', co(function*() {
    var result;
    User.schema([
      StringField('username'),
      BooleanField('flag'),
      Scope('default',
      function() {
        return this.where({
          flag: true
        });
      })
    ]);
    yield [
      new User({
        username: 'alice',
        flag: true
      }).save(),
      new User({
        username: 'bob',
        flag: false
      }).save()
    ];
    result = (yield User.fetchAll());
    result.length.should.equal(1);
    result = (yield User.unscoped().fetchAll());
    return result.length.should.equal(2);
  }));
  it('can chain scope next to unscoped', co(function*() {
    var result;
    User.schema([
      StringField('username'),
      BooleanField('flag'),
      Scope('default',
      function() {
        return this.where({
          flag: true
        });
      }),
      Scope('nameStartsWith',
      function(value) {
        return this.where('username',
      'like',
      `${value}%`);
      })
    ]);
    yield [
      new User({
        username: 'alice',
        flag: false
      }).save(),
      new User({
        username: 'bob',
        flag: false
      }).save()
    ];
    result = (yield User.unscoped().nameStartsWith('a').fetchAll());
    result.length.should.equal(1);
    return result.at(0).username.should.equal('alice');
  }));
  return describe('on relations', function() {
    beforeEach(co(function*() {
      var groups, users;
      users = (yield [
        new User({
          username: 'alice',
          flag: true
        }).save(),
        new User({
          username: 'bob',
          flag: true
        }).save(),
        new User({
          username: 'alan',
          flag: false
        }).save(),
        new User({
          username: 'charley',
          flag: true
        }).save()
      ]);
      groups = (yield [
        new Group({
          name: 'wheel'
        }).save(),
        new Group({
          name: 'users'
        }).save()
      ]);
      return (yield [
        // alice is wheel
        db.knex('groups_users').insert({
          user_id: users[0].id,
          group_id: groups[0].id
        }),
        // bob, alan and charley are users
        db.knex('groups_users').insert({
          user_id: users[1].id,
          group_id: groups[1].id
        }),
        db.knex('groups_users').insert({
          user_id: users[2].id,
          group_id: groups[1].id
        }),
        db.knex('groups_users').insert({
          user_id: users[3].id,
          group_id: groups[1].id
        })
      ]);
    }));
    afterEach(function() {
      return init.truncate('groups', 'groups_users');
    });
    describe('BelongsToMany', function() {
      beforeEach(co(function() {
        User.schema([
          StringField('username'),
          Scope('flagged',
          function() {
            return this.where({
              flag: true
            });
          }),
          Scope('nameStartsWith',
          function(value) {
            return this.where('username',
          'like',
          `${value}%`);
          })
        ]);
        return Group.schema([
          StringField('name'),
          BelongsToMany(User),
          BelongsToMany(User,
          {
            name: 'flaggedUsers',
            query: function() {
              return this.flagged();
            }
          })
        ]);
      }));
      it('fetch', co(function*() {
        var wheel, wheelUsers;
        wheel = (yield new Group({
          name: 'wheel'
        }).fetch());
        wheelUsers = (yield wheel.$users.flagged().fetch());
        wheelUsers.should.be.an.instanceof(db.Collection);
        wheelUsers.length.should.equal(1);
        return wheelUsers.at(0).username.should.equal('alice');
      }));
      it('count', co(function*() {
        var wheel;
        wheel = (yield new Group({
          name: 'wheel'
        }).fetch());
        return wheel.$users.count().should.become(1);
      }));
      it('scope in relation definition', co(function*() {
        var users, usersUsers;
        users = (yield new Group({
          name: 'users'
        }).fetch());
        yield users.$users.count().should.become(3);
        yield users.$flaggedUsers.count().should.become(2);
        usersUsers = (yield users.$flaggedUsers.fetch());
        usersUsers.should.be.an.instanceof(db.Collection);
        usersUsers.length.should.equal(2);
        return usersUsers.at(0).username.should.equal('bob');
      }));
      return it('chaining scopes', co(function*() {
        var result, users;
        users = (yield new Group({
          name: 'users'
        }).fetch());
        yield users.$users.flagged().nameStartsWith('b').count().should.become(1);
        result = (yield users.$users.flagged().nameStartsWith('b').fetch());
        result.length.should.equal(1);
        return result.at(0).username.should.equal('bob');
      }));
    });
    describe("doesn't affects cached relation", function() {
      beforeEach(co(function() {
        return Group.schema([StringField('name'), BelongsToMany(User)]);
      }));
      it('with scope, then without', co(function*() {
        var all, flagged, flagged2, group;
        User.schema([
          Scope('flagged',
          function() {
            return this.where({
              flag: true
            });
          }),
          Scope('nameStartsWith',
          function(value) {
            return this.where('username',
          'like',
          `${value}%`);
          })
        ]);
        group = (yield new Group({
          name: 'users'
        }).fetch());
        flagged = (yield group.$users.flagged().fetch());
        all = (yield group.$users.fetch());
        flagged2 = (yield group.$users.flagged().fetch());
        flagged.length.should.equal(2);
        all.length.should.equal(3);
        flagged2.length.should.equal(2);
        return group.$users.length.should.equal(3);
      }));
      it('with default scope, then with scope', co(function*() {
        var flagged, group, none;
        User.schema([
          Scope('default',
          function() {
            return this.where({
              flag: true
            });
          }),
          Scope('nameStartsWith',
          function(value) {
            return this.where('username',
          'like',
          `${value}%`);
          })
        ]);
        group = (yield new Group({
          name: 'users'
        }).fetch());
        flagged = (yield group.$users.fetch());
        none = (yield group.$users.nameStartsWith('a').fetch());
        flagged.length.should.equal(2);
        none.length.should.equal(0);
        return group.$users.length.should.equal(2);
      }));
      it('with scope, then with default scope', co(function*() {
        var bob, flagged, group;
        User.schema([
          Scope('default',
          function() {
            return this.where({
              flag: true
            });
          }),
          Scope('nameStartsWith',
          function(value) {
            return this.where('username',
          'like',
          `${value}%`);
          })
        ]);
        group = (yield new Group({
          name: 'users'
        }).fetch());
        bob = (yield group.$users.nameStartsWith('b').fetch());
        flagged = (yield group.$users.fetch());
        bob.length.should.equal(1);
        flagged.length.should.equal(2);
        return group.$users.length.should.equal(2);
      }));
      it('with default scope, then unscoped', co(function*() {
        var all, flagged, group;
        User.schema([
          Scope('default',
          function() {
            return this.where({
              flag: true
            });
          }),
          Scope('nameStartsWith',
          function(value) {
            return this.where('username',
          'like',
          `${value}%`);
          })
        ]);
        group = (yield new Group({
          name: 'users'
        }).fetch());
        flagged = (yield group.$users.fetch());
        all = (yield group.$users.unscoped().fetch());
        flagged.length.should.equal(2);
        all.length.should.equal(3);
        return group.$users.length.should.equal(2);
      }));
      return it('unscoped, then with default scope', co(function*() {
        var all, flagged, group;
        User.schema([
          Scope('default',
          function() {
            return this.where({
              flag: true
            });
          }),
          Scope('nameStartsWith',
          function(value) {
            return this.where('username',
          'like',
          `${value}%`);
          })
        ]);
        group = (yield new Group({
          name: 'users'
        }).fetch());
        all = (yield group.$users.unscoped().fetch());
        flagged = (yield group.$users.fetch());
        flagged.length.should.equal(2);
        all.length.should.equal(3);
        return group.$users.length.should.equal(2);
      }));
    });
    return it("uses default scope with relations", co(function*() {
      var all, flagged, group;
      User = (function() {
        class User extends db.Model {};

        User.prototype.tableName = 'users';

        User.schema([
          StringField('username'),
          Scope('default',
          function() {
            return this.where({
              flag: true
            });
          })
        ]);

        return User;

      }).call(this);
      Group = (function() {
        class Group extends db.Model {};

        Group.prototype.tableName = 'groups';

        Group.schema([BelongsToMany(User)]);

        return Group;

      }).call(this);
      group = (yield new Group({
        name: 'users'
      }).fetch());
      flagged = (yield group.$users.fetch());
      flagged.length.should.equal(2);
      all = (yield group.$users.unscoped().fetch());
      return all.length.should.equal(3);
    }));
  });
});
